version: '3'

services:
  # MongoDB instances for each service
  user-db:
    image: mongo:latest
    container_name: user-db
    ports:
      - "27017:27017"
    volumes:
      - user-db-data:/data/db
    networks:
      - microservices-network

  product-db:
    image: mongo:latest
    container_name: product-db
    ports:
      - "27018:27017"
    volumes:
      - product-db-data:/data/db
    networks:
      - microservices-network

  order-db:
    image: mongo:latest
    container_name: order-db
    ports:
      - "27019:27017"
    volumes:
      - order-db-data:/data/db
    networks:
      - microservices-network

  # Kafka for message queue
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microservices-network

  # Microservices
  user-service:
    build:
      context: ./services/user-service
    container_name: user-service
    ports:
      - "3001:3001"
    depends_on:
      - user-db
      - kafka
    environment:
      - MONGODB_URI=mongodb://user-db:27017/user-service
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - PORT=3001
      - JWT_SECRET=your_jwt_secret_key
    networks:
      - microservices-network

  product-service:
    build:
      context: ./services/product-service
    container_name: product-service
    ports:
      - "3002:3002"
    depends_on:
      - product-db
      - kafka
    environment:
      - MONGODB_URI=mongodb://product-db:27017/product-service
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - PORT=3002
    networks:
      - microservices-network

  order-service:
    build:
      context: ./services/order-service
    container_name: order-service
    ports:
      - "3003:3003"
    depends_on:
      - order-db
      - kafka
    environment:
      - MONGODB_URI=mongodb://order-db:27017/order-service
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - PORT=3003
    networks:
      - microservices-network

  # Redis for caching
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - microservices-network

  # GraphQL Gateway
  gateway:
    build:
      context: ./gateway
    container_name: gateway
    ports:
      - "4000:4000"
    depends_on:
      - user-service
      - product-service
      - order-service
      - redis
    environment:
      - USER_SERVICE_URL=http://user-service:3001/api
      - PRODUCT_SERVICE_URL=http://product-service:3002/api
      - ORDER_SERVICE_URL=http://order-service:3003/api
      - REDIS_URL=redis://redis:6379
      - PORT=4000
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  user-db-data:
  product-db-data:
  order-db-data:
  redis-data: